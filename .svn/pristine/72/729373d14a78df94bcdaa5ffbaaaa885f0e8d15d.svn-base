#include <QsLog.h>
#include "batteryController.h"

BatteryController::BatteryController(const QString &portName, int slaveAddress, QObject *parent) :
	QObject(parent),
	mConnectionState(Disconnected),
	mDeviceType(0),
	mDeviceSubType(0),
	mErrorCode(0),
	mFirmwareVersion(0),
	mPortName(portName),
	mSlaveAddress(slaveAddress)
{
QLOG_INFO() << "BatteryController:: " << slaveAddress;	
	//resetValues();
}

ConnectionState BatteryController::connectionState() const
{
	return mConnectionState;
}

void BatteryController::setConnectionState(ConnectionState state)
{
	if (mConnectionState == state)
		return;
	mConnectionState = state;
	emit connectionStateChanged();
}

int BatteryController::deviceType() const
{
	return mDeviceType;
}

void BatteryController::setDeviceType(int t)
{
	if (mDeviceType == t)
		return;
	mDeviceType = t;
	emit deviceTypeChanged();
}

int BatteryController::deviceSubType() const
{
	return mDeviceSubType;
}

void BatteryController::setDeviceSubType(int t)
{
	if (mDeviceSubType == t)
		return;
	mDeviceSubType = t;
	emit deviceSubTypeChanged();
}

QString BatteryController::productName() const
{
	switch (mDeviceType) {
	case 102:
		// EM112-DIN AV1 1 x S1 PF B
		return "EM112-DIN.AV1.1.X.S1.X";
	case 103:
		return "EM111-DIN.AV8.1.X.S1.X";
	case 104:
		// EM112-DIN AV0 1 x S1 PF B
		return "EM112-DIN.AV0.1.x.S1.X";
	case 120:
		return "ET112-DIN.AV0.1.X.S1.X";
	case 121:
		return "ET112-DIN.AV1.1.X.S1.X";
	case 345:
		return "EM340-DIN.AV2.3.X.S1.X";
	}

	switch (mDeviceSubType) {
	case 75:
		return "EM24-DIN.AV6.3.X.O2.X";
	case 76:
		return "EM24-DIN.AV6.3.X.R2.X";
	case 77:
		return "EM24-DIN.AV6.3.X.IS.X";
	case 78:
		return "EM24-DIN.AV6.3.X.XX.X";
	}
	QString result = "EM24-DIN";
	switch (mDeviceSubType & 0x3F) {
	case 0:
		result += ".AV9.3.X.O2";
		break;
	case 2:
		result += ".AV9.3.X.IS";
		break;
	case 3:
		result += ".AV9.3.X.XX";
		break;
	case 4:
		result += ".AV9.3.X.O2";
		break;
	case 5:
		result += ".AV2.3.X.IS";
		break;
	case 6:
		result += ".AV2.3.X.XX";
		break;
	case 7:
		result += ".AV2.3.X.O2";
		break;
	case 9:
		result += ".AV5.3.X.IS";
		break;
	case 10:
		result += ".AV5.3.X.XX";
		break;
	}
	switch (mDeviceSubType & 0xC0) {
	case 0x00:
		result += ".PFA";
		break;
	case 0x40:
		result += ".X";
		break;
	case 0x80:
		result += ".PFB";
		break;
	}
	return result;
}

int BatteryController::errorCode() const
{
	return mErrorCode;
}

void BatteryController::setErrorCode(int code)
{
	if (mErrorCode == code)
		return;
	mErrorCode = code;
	emit errorCodeChanged();
}

QString BatteryController::portName() const
{
	return mPortName;
}

int BatteryController::slaveAddress() const
{
	return mSlaveAddress;
}

QString BatteryController::serial() const
{
	return mSerial;
}

void BatteryController::setSerial(const QString &s)
{
	if (mSerial == s)
		return;
	mSerial = s;
	emit serialChanged();
}

int BatteryController::firmwareVersion() const
{
	return mFirmwareVersion;
}

void BatteryController::setFirmwareVersion(int v)
{
	if (mFirmwareVersion == v)
		return;
	mFirmwareVersion = v;
	emit firmwareVersionChanged();
}

void BatteryController::resetValues()
{

}
