#ifndef _VELIB_NMEA2K_N2K_H_
#define _VELIB_NMEA2K_N2K_H_

/**
 * @ingroup VELIB
 * @defgroup VELIB_NMEA2K NMEA2000
 * @brief
 *	Support for common NMEA 2000.
 * @details
 *	NMEA 2000 is defined on top of J1939 and supports Marine related message for
 *	recreational boats. NMEA 2000 defined it's own transport protocol (Fast Packet)
 *	and defined a method to request and command values (Complex Request).
 */
 /// @{

#include <velib/J1939/J1939_constants.h>

/// Some known NMEA 2000 PGNs
typedef un16 N2kPgnDp1;
#define N2K_PGN1_COMPLEX_GROUP					0xED00U
#define N2K_PGN1_PGN_LIST						0xEE00U
#define N2K_PGN1_PROPRIETARY_PDU1				0xEF00U
#define N2K_PGN1_PRODUCT_INFO					0xF014U
#define N2K_PGN1_CONFIG_INFO					0xF016U
#define N2K_PGN1_ENGINE_RAPID					0xF200U
#define N2K_PGN1_LOAD_CONTROLLER_CONNECTION		0xF20CU
#define N2K_PGN1_SWITCH_STATUS					0xF20DU
#define N2K_PGN1_SWITCH_CONTROL					0xF20EU
#define N2K_PGN1_AC_INPUT_STATUS				0xF20FU
#define N2K_PGN1_FLUID_LEVEL					0xF211U
#define N2K_PGN1_DC_DETAILS						0xF212U
#define N2K_PGN1_CHARGER_STATUS					0xF213U
#define N2K_PGN1_BATTERY_STATUS					0xF214U
#define N2K_PGN1_INVERTER_STATUS				0xF215U
#define N2K_PGN1_CHARGER_CFG_STATUS				0xF216U
#define N2K_PGN1_INVERTER_CFG_STATUS			0xF217U
#define N2K_PGN1_BATTERY_CFG_STATUS				0xF219U
#define N2K_PGN1_AC_POWER_CURRENT_PHASE_A		0xF300U
#define N2K_PGN1_AC_POWER_CURRENT_PHASE_B		0xF301U
#define N2K_PGN1_AC_POWER_CURRENT_PHASE_C		0xF302U
#define N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_A	0xF303U
#define N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_B	0xF304U
#define N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_C	0xF305U
#define N2K_PGN1_CONVERTER_STATUS				0xF306U
#define N2K_PGN1_DC_VOLTAGE_CURRENT				0xF307U

typedef un32 N2kMsgNr;
#define NK2_PGN1								((un32)	0x10000U)

#define	N2K_MSGNR_COMPLEX_GROUP					(NK2_PGN1 | N2K_PGN1_COMPLEX_GROUP)
#define	N2K_MSGNR_PGN_LIST						(NK2_PGN1 | N2K_PGN1_PGN_LIST)
#define	N2K_MSGNR_PROPRIETARY_PDU1				(NK2_PGN1 | N2K_PGN1_PROPRIETARY_PDU1)
#define	N2K_MSGNR_PRODUCT_INFO					(NK2_PGN1 | N2K_PGN1_PRODUCT_INFO)
#define	N2K_MSGNR_CONFIG_INFO					(NK2_PGN1 | N2K_PGN1_CONFIG_INFO)
#define	N2K_MSGNR_ENGINE_RAPID					(NK2_PGN1 | N2K_PGN1_ENGINE_RAPID)
#define N2K_MSGNR_LOAD_CONTROLLER_CONNECTION	(NK2_PGN1 | N2K_PGN1_LOAD_CONTROLLER_CONNECTION)
#define	N2K_MSGNR_SWITCH_STATUS					(NK2_PGN1 | N2K_PGN1_SWITCH_STATUS)
#define	N2K_MSGNR_SWITCH_CONTROL				(NK2_PGN1 | N2K_PGN1_SWITCH_CONTROL)
#define N2K_MSGNR_AC_INPUT_STATUS				(NK2_PGN1 | N2K_PGN1_AC_INPUT_STATUS)
#define	N2K_MSGNR_FLUID_LEVEL					(NK2_PGN1 | N2K_PGN1_FLUID_LEVEL)
#define	N2K_MSGNR_DC_DETAILS					(NK2_PGN1 | N2K_PGN1_DC_DETAILS)
#define	N2K_MSGNR_CHARGER_STATUS				(NK2_PGN1 | N2K_PGN1_CHARGER_STATUS)
#define	N2K_MSGNR_BATTERY_STATUS				(NK2_PGN1 | N2K_PGN1_BATTERY_STATUS)
#define	N2K_MSGNR_INVERTER_STATUS				(NK2_PGN1 | N2K_PGN1_INVERTER_STATUS)
#define N2K_MSGNR_CHARGER_CFG_STATUS			(NK2_PGN1 | N2K_PGN1_CHARGER_CFG_STATUS)
#define N2K_MSGNR_INVERTER_CFG_STATUS			(NK2_PGN1 | N2K_PGN1_INVERTER_CFG_STATUS)
#define N2K_MSGNR_BATTERY_CFG_STATUS			(NK2_PGN1 | N2K_PGN1_BATTERY_CFG_STATUS)
#define N2K_MSGNR_AC_POWER_CURRENT_PHASE_A		(NK2_PGN1 | N2K_PGN1_AC_POWER_CURRENT_PHASE_A)
#define N2K_MSGNR_AC_POWER_CURRENT_PHASE_B		(NK2_PGN1 | N2K_PGN1_AC_POWER_CURRENT_PHASE_B)
#define N2K_MSGNR_AC_POWER_CURRENT_PHASE_C		(NK2_PGN1 | N2K_PGN1_AC_POWER_CURRENT_PHASE_C)
#define N2K_MSGNR_AC_VOLTAGE_FREQUENCY_PHASE_A	(NK2_PGN1 | N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_A)
#define N2K_MSGNR_AC_VOLTAGE_FREQUENCY_PHASE_B	(NK2_PGN1 | N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_B)
#define N2K_MSGNR_AC_VOLTAGE_FREQUENCY_PHASE_C	(NK2_PGN1 | N2K_PGN1_AC_VOLTAGE_FREQUENCY_PHASE_C)
#define N2K_MSGNR_CONVERTER_STATUS				(NK2_PGN1 | N2K_PGN1_CONVERTER_STATUS)
#define N2K_MSGNR_DC_VOLTAGE_CURRENT			(NK2_PGN1 | N2K_PGN1_DC_VOLTAGE_CURRENT)

typedef enum
{
	N2K_PGN1_PF_COMPLEX_GROUP					= 0xED,
	N2K_PGN1_PF_PGN_LIST						= 0xEE,
	N2K_PGN1_PF_PROPRIETARY_PDU1				= 0xEF,
	N2K_PGN1_PF_PROPRIETARY_PDU2				= 0xFF
} N2kPgnPfDp1;

/// Some known NMEA 2000 manufacturers.
typedef enum
{
	N2K_MAN_ACTIA_CORPORATION					= 199,
	N2K_MAN_ACTISENSE							= 273,
	N2K_MAN_AETNA_ENGINEERING					= 215,
	N2K_MAN_AIRMAR								= 135,
	N2K_MAN_BEEDE_ELECTRICAL					= 185,
	N2K_MAN_BEP									= 295,
	N2K_MAN_BRP									= 163,
	N2K_MAN_BLUE_WATER_DATA						= 148,
	N2K_MAN_CPAC_SYSTEMS_AB						= 165,
	N2K_MAN_COELMO_SRL_ITALY					= 286,
	N2K_MAN_DISENOS_Y_TECHNOLOGIA				= 201,
	N2K_MAN_DNA_GROUP_INC						= 211,
	N2K_MAN_EMMI_NETWORK						= 224,
	N2K_MAN_ERIDE								= 243,
	N2K_MAN_FARIA_INSTRUMENTS					= 1863,
	N2K_MAN_FLOSCAN_INSTRUMENT					= 192,
	N2K_MAN_FURUNO_USA							= 1855,
	N2K_MAN_FW_MURPHY							= 78,
	N2K_MAN_GARMIN								= 229,
	N2K_MAN_GROCO								= 272,
	N2K_MAN_HAMILTON_JET						= 283,
	N2K_MAN_HEMISPHERE_GPS						= 88,
	N2K_MAN_HONDA_MOTOR							= 257,
	N2K_MAN_KVASAR								= 1859,
	N2K_MAN_KOHLER								= 85,
	N2K_MAN_LITTON								= 1858,
	N2K_MAN_LOWRANCE_ELECTRONICS				= 140,
	N2K_MAN_MARETRON							= 137,
	N2K_MAN_MERCURY_MARINE						= 144,
	N2K_MAN_MMP									= 1860,
	N2K_MAN_MORITZ_AEROSPACE					= 176,
	N2K_MAN_MYSTIC_VALLEY_COMMUNICATIONS		= 198,
	N2K_MAN_NAUTIBUS_ELECTRONIC					= 147,
	N2K_MAN_NAVICO								= 275,
	N2K_MAN_NAVIONICS							= 1852,
	N2K_MAN_NORTHSTAR_TECHNOLOGIES				= 1854,
	N2K_MAN_OFFSHORE_SYSTEMS_UK					= 161,
	N2K_MAN_RAYMARINE							= 1851,
	N2K_MAN_SEA_RECOVERY						= 285,
	N2K_MAN_LTD									= 235,
	N2K_MAN_YAMAHA								= 1862,
	N2K_MAN_SIMRAD								= 1857,
	N2K_MAN_TELEFLEX							= 1850,
	N2K_MAN_TRIMBLE								= 1856,
	N2K_MAN_VECTOR_CANTECH						= 1861,
	N2K_MAN_VICTRON								= 358,
	N2K_MAN_VOLVO								= 174,
	N2K_MAN_WESTERBEKE_CORP						= 154,
	N2K_MAN_XANTREX_TECHNOLOGY					= 168,
	N2K_MAN_YACHT_MONITORING_SOLUTIONS			= 233,
	N2K_MAN_INVALID								= 2047
} N2kManufacturers;


/// Returns the 2 byte industry + manufacturer code as used in proprietary messages.
#define N2K_MAN_TAG(man) (((un16) J1939_INDUSTRY_MARINE << 13) | 0x1800 | (man))

/// Complete tag as used in messages.
typedef enum
{
	N2K_MAN_TAG_VICTRON = N2K_MAN_TAG(N2K_MAN_VICTRON),
	N2K_MAN_TAG_INVALID = N2K_MAN_TAG(N2K_MAN_INVALID)
} N2kManTags;

/// Some known NMEA 2000 classes.
typedef enum
{
	N2K_CLASS_RESERVED							= 0,
	N2K_CLASS_SYSTEM_TOOLS						= 10,
	N2K_CLASS_SAFETY							= 20,
	N2K_CLASS_INTERNETWORK_DEVICE				= 25,
	N2K_CLASS_POWER_MANAGEMENT_AND_LIGHTING		= 30,
	N2K_CLASS_ELECTRICAL_GENERATION				= 35,
	N2K_CLASS_STEERING							= 40,
	N2K_CLASS_PROPULSION						= 50,
	N2K_CLASS_NAVIGATION						= 60,
	N2K_CLASS_COMMUNICATIONS					= 70,
	N2K_CLASS_GENERAL							= 80, /* Deprecated for new designs */
	N2K_CLASS_ENVIRONMENTAL						= 90,
	N2K_CLASS_DECK								= 100,
	N2K_CLASS_DISPLAY							= 120
} N2kClass;

typedef enum {
	/*
	 * Device that brings both NMEA 2000 data onto a computer, and
	 * computer data onto an NMEA 2000 network.
	 */
	N2K_FUNCTION_PC_GATEWAY = 130,
	/*
	 * Device that brings NMEA 2000 data to an analog system or display.
	 */
	N2K_FUNCTION_TO_ANALOG = 131,
	/*
	 * Device that converts analog device data and sends this onto the
	 * NMEA 2000 network.
	 */
	N2K_FUNCTION_FROM_ANALOG = 132,
	/*
	 * Device that joins an NMEA 2000 network to NMEA 0183 circuit(s) and
	 * provides translation between NMEA 2000 and 0183 data formats.
	 */
	N2K_FUNCTION_NMEA_0183 = 135,
	/*
	 * Device that joins network segments with the same network
	 * protocol. On each side of a router address space, data rate and
	 * physical media may differ.
	 */
	 N2K_FUNCTION_ROUTER = 140,
	/*
	 * Device that joins network segments using the same network
	 * protocol and address space. Data rate and physical media may
	 * differ on each side to the bridge. A bridge may perform message
	 * filtering.
	 */
	N2K_FUNCTION_BRIDGE = 150,
	/*
	 * Device that receives a signal and retransmits it at a higher level or
	 * higher power.
	 */
	N2K_FUNCTION_REPEATER = 160
} N2kFunctionNetwork;

/// Some known NMEA 2000 functions.
typedef enum
{
	N2K_FUNCTION_TIME							= 130,
	N2K_FUNCTION_RECORDER						= 140,
	N2K_FUNCTION_INSTRUMENT						= 150,
	N2K_FUNCTION_DISPLAY						= 160, /* Deprecated: use class=120 / function=130 */
	N2K_FUNCTION_SENSOR							= 170,
	N2K_FUNCTION_SENSOR_WEATHER					= 180,
	N2K_FUNCTION_TRANSDUCER						= 190,
	N2K_FUNCTION_NMEA_0183_DEPRECATED			= 190
} N2kFunctionGeneral;

typedef enum
{
	N2K_FUNCTION_DC_GENERATOR					= 141,
	N2K_FUNCTION_SOLAR_PANEL					= 142,
	N2K_FUNCTION_WIND_GENERATOR					= 143,
	N2K_FUNCTION_FUEL_CELL						= 145,
	N2K_FUNCTION_NETWORK_SUPPLY					= 146,
	N2K_FUNCTION_AC_MONITOR						= 150,
	N2K_FUNCTION_AC_GENERATOR					= 151,
	N2K_FUNCTION_AC_MAINS						= 152,
	N2K_FUNCTION_INVERTER						= 153,
	N2K_FUNCTION_AC_INPUT						= 154,
	N2K_FUNCTION_AC_OUTPUT						= 155,
	N2K_FUNCTION_CHARGER						= 160,
	N2K_FUNCTION_BATTERY						= 170
} N2kFunctionElectrical;

typedef enum
{
	N2K_FUNCTION_DISPLAY_UNIT					= 130,
	N2K_FUNCTION_ALARM_ENUNCIATOR				= 140
} N2kFunctionDisplay;

// DD002
typedef enum
{
	N2K_PAIR_OFF,
	N2K_PAIR_ON,
	N2K_PAIR_ERROR,
	N2K_PAIR_UNAVAILABLE
} N2kPairOnOff;

// DD003
typedef enum
{
	N2K_TURN_OFF,
	N2K_TURN_ON,
	N2K_PAIR_RESERVED,
	N2K_PAIR_NO_ACTION
} N2kGenericCommandPair;

// DD264
typedef enum
{
	N2K_CHGR_STATE_NOT_CHARGING,
	N2K_CHGR_STATE_BULK,
	N2K_CHGR_STATE_ABSORPTION,
	N2K_CHGR_STATE_OVERCHARGE,			// Protection?
	N2K_CHGR_STATE_EQUALIZE,
	N2K_CHGR_STATE_FLOAT,
	N2K_CHGR_STATE_NO_FLOAT,			// ???
	N2K_CHGR_STATE_CONSTANT_VI,
	N2K_CHGR_STATE_DISABLED,
	N2K_CHGR_STATE_FAULT,

	N2K_CHGR_STATE_ERROR						= 0x0E,
	N2K_CHGR_STATE_UNAVAILABLE					= 0x0F
} N2kChgrState;

// DD265
typedef enum
{
	N2K_CHGR_MODE_STANDALONE,
	N2K_CHGR_MODE_PRIMARY,
	N2K_CHGR_MODE_SECONDARY,
	N2K_CHGR_MODE_ECHO,
	N2K_CHGR_MODE_UNAVAILABLE = 0X0F
} N2kChgrMode;

// DD266
typedef enum
{
	N2K_INVERTER_STATE_INVERT,
	N2K_INVERTER_STATE_AC_PASSTHRU,
	N2K_INVERTER_STATE_LOAD_SENSE,
	N2K_INVERTER_STATE_FAULT,
	N2K_INVERTER_STATE_DISABLED,
	N2K_INVERTER_STATE_ERROR					= 0x0E,
	N2K_INVERTER_STATE_UNAVAILABLE				= 0x0F
} N2kInverterState;

// DD272
typedef enum
{
	N2K_CHARGING_ALGORITHM_TRICKLE,
	N2K_CHARGING_ALGORITHM_CVCC,
	N2K_CHARGING_ALGORITHM_2_STAGE,
	N2K_CHARGING_ALGORITHM_3_STAGE,
	N2K_CHARGING_ALGORITHM_ERROR				= 0x0E,
	N2K_CHARGING_ALGORITHM_UNAVAILABLE			= 0x0F
} N2kChargingAlgorithm;

// Not an official n2k data type yet
typedef enum
{
	N2K_CONVERTER_STATE_OFF,
	N2K_CONVERTER_STATE_LOW_POWER_MODE,
	N2K_CONVERTER_STATE_FAULT,
	N2K_CONVERTER_STATE_BULK,
	N2K_CONVERTER_STATE_ABSORPTION,
	N2K_CONVERTER_STATE_FLOAT,
	N2K_CONVERTER_STATE_STORAGE,
	N2K_CONVERTER_STATE_EQUALIZE,
	N2K_CONVERTER_STATE_PASSTHRU,
	N2K_CONVERTER_STATE_INVERTING,
	N2K_CONVERTER_STATE_ASSISTING,

	/* Not an official NMEA2000 state, should be added to
	 * the official definition to avoid duplicate enum members */
	N2K_CONVERTER_STATE_PSU,

	/* Victron Specific, not official NMEA2000 states */

	 /* access denied, e.g. when ve.configure is active */
	N2K_CONVERTER_STATE_BLOCKED = 0xFA,
	N2K_CONVERTER_STATE_TEST = 0xFB,
	N2K_CONVERTER_STATE_HUB1 = 0xFC,

	N2K_CONVERTER_STATE_UNAVAILABLE = 0xFF
} N2kConverterState;

// DD274
typedef enum
{
	N2K_BATTERY_TEMP_COLD,
	N2K_BATTERY_TEMP_WARM,
	N2K_BATTERY_TEMP_HOT,
	N2K_BATTERY_TEMP_ERROR						= 0x0E,
	N2K_BATTERY_TEMP_UNAVAILABLE				= 0x0F
} N2kBatteryTemp;

/// @}

#endif
